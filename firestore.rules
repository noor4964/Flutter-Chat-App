rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ✅ Function to check authentication
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // ✅ Users Collection (Only the user can access their profile)
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write, create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // ✅ Call records - Fixed to ensure proper permissions
    match /calls/{callId} {
      // Only authenticated users can create calls
      allow create: if isAuthenticated() &&
                      request.resource.data.callerId == request.auth.uid;
      
      // Calls can only be read by the participants
      allow read: if isAuthenticated() &&
                    (resource.data.callerId == request.auth.uid ||
                     resource.data.receiverId == request.auth.uid);
      
      // Calls can only be updated by the participants - FIXED to check both request and resource data
      allow update: if isAuthenticated() && 
                      ((resource.data.callerId == request.auth.uid ||
                       resource.data.receiverId == request.auth.uid) ||
                       (request.resource.data.callerId == request.auth.uid ||
                       request.resource.data.receiverId == request.auth.uid));
      
      // Deletion is restricted to either participant
      allow delete: if isAuthenticated() && 
                     (resource.data.callerId == request.auth.uid || 
                      resource.data.receiverId == request.auth.uid);
    }
    
    // ✅ Chats Collection (Only members can access)
    match /chats/{chatId} {
      // ✅ Create: Check request.resource.data
      allow create: if isAuthenticated() 
        && request.auth.uid in request.resource.data.userIds;
      // ✅ Read/Update/Delete: Check resource.data
      allow read, update, delete: if isAuthenticated() 
        && request.auth.uid in resource.data.userIds;
        
      // ✅ Messages subcollection (Only chat members can access)
      match /messages/{messageId} {
        allow create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.senderId;
      }
      
      // ✅ Typing status subcollection
      match /typingUsers/{typingId} {
        allow read, write: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }

    // ✅ Connections Collection (Friend Requests)
    match /connections/{connectionId} {
      allow read: if isAuthenticated() 
                  && (request.auth.uid == resource.data.senderId 
                      || request.auth.uid == resource.data.receiverId);

      allow create: if isAuthenticated() 
                    && request.resource.data.senderId == request.auth.uid
                    && request.resource.data.receiverId is string
                    && request.resource.data.status == "pending";

      allow update: if isAuthenticated() 
                    && request.auth.uid == resource.data.receiverId
                    && request.resource.data.status is string;

      allow delete: if isAuthenticated() 
                    && request.auth.uid == resource.data.senderId;
    }

    // ✅ Stories Collection (Temporary Status Updates)
    match /stories/{storyId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.viewers;
      allow create, delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    // ✅ Notifications Collection (Push Notifications)
    match /notifications/{notificationId} {
      allow read, delete: if isAuthenticated() && request.auth.uid == resource.data.receiverId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.senderId;
    }
  }
}